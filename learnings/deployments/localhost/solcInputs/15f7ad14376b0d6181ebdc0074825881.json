{
  "language": "Solidity",
  "sources": {
    "contracts/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    \r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier:MIT\n\npragma solidity^0.8.19;\n\nimport \"./AggregatorV3Interface.sol\";\nimport \"./getPriceFeeds.sol\";\n\nerror valueIsLessThanMinUsd();\nerror notOwner();\nerror largeValueWithdraw();\ncontract FundMe {\n    using PriceFeeds for int256;\n    \n    address public immutable owner;\n    int256  public minimumUsd=50;\n    uint256 public bal;\n    address public ethUsdPriceFeedAddress;\n    mapping( address=>uint256) public usersWithAmountFunded;\n    address[] public funders ;\n\n    \n    \n    constructor(address priceAddress) {\n        owner = msg.sender;\n        ethUsdPriceFeedAddress= priceAddress;\n\n        bal= 0;\n    }\n\n    receive() external payable {\n        sendEth();\n     }\n     fallback() external payable { \n        sendEth();\n     }\n    function getAllFunders() public  view returns(  address[] memory){\n        return funders;\n    }\n    \n    function sendEth() public payable {\n        uint256 sendValue= msg.value;\n        if(minimumUsd.getPriceOfEth(ethUsdPriceFeedAddress)>int256(msg.value)) {\n            revert valueIsLessThanMinUsd();\n        }\n        \n        bal = bal+sendValue;\n        if (findFunder(msg.sender)){\n            usersWithAmountFunded[msg.sender] = usersWithAmountFunded[msg.sender]+sendValue;\n\n        }\n        else{\n\n            usersWithAmountFunded[msg.sender]= sendValue;\n            funders.push(msg.sender);\n        }\n       \n    }\n    \n\n    function findFunder(address sender)internal view returns(bool){\n        for( uint256 i =0; i< funders.length;i++){\n            if(funders[i]== sender){\n                return true;\n            }\n        }\n        return false;\n\n    }\n\n    function withdraw(uint256 val) public  isOwner() {\n        if ( val>address(this).balance) revert largeValueWithdraw();\n        (bool success,) = payable(owner).call{value:val}(\"\");\n        require(success,\"transaction was unsuccessful\");\n        bal= bal-val;\n\n\n    }\n\n    modifier isOwner(){\n        if ( msg.sender!= owner){\n            revert notOwner();\n        }\n        _;\n    }\n  \n\n\n}\n"
    },
    "contracts/getPriceFeeds.sol": {
      "content": "\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19 ;\r\n\r\nimport \"./AggregatorV3Interface.sol\";\r\nlibrary PriceFeeds{\r\n    \r\n\r\n    function getConversionRate(address ethUsdPriceFeedAddress) public view returns(int256){\r\n        AggregatorV3Interface priceFeeds= AggregatorV3Interface(ethUsdPriceFeedAddress);\r\n        (, int256 price,,,)= priceFeeds.latestRoundData();\r\n        return price;\r\n\r\n\r\n    }\r\n    function getPriceOfEth(int256 value , address ethUsdPriceFeedAddress) internal view returns(int256){\r\n        int256 valueOfEth= getConversionRate(ethUsdPriceFeedAddress)/10e7;\r\n        value = value*10e17;\r\n        int256 ethAmount= value/valueOfEth;\r\n        return ethAmount;\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n}"
    },
    "contracts/MockAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19 ;\r\nimport \"./AggregatorV3Interface.sol\";\r\ncontract MockAggregator is AggregatorV3Interface{\r\n     int256 public  _currentPrice ;\r\n     constructor(int256 value){\r\n        _currentPrice = value;\r\n\r\n     }\r\n\r\n      function latestRoundData() \r\n        external \r\n        view \r\n        override \r\n        returns (\r\n            uint80 roundId, \r\n            int256 answer, \r\n            uint256 startedAt, \r\n            uint256 updatedAt, \r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        return (\r\n            1,                  // Round ID\r\n            _currentPrice,       // Latest price (the mock value)\r\n            block.timestamp,    // Started at (current block timestamp)\r\n            block.timestamp,    // Updated at (current block timestamp)\r\n            1                   // Answered in round (static value for simplicity)\r\n        );\r\n    }\r\n\r\n\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}